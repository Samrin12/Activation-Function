# -*- coding: utf-8 -*-
"""Activation_Function

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/activation-function-31f872ae-b94d-48f5-882f-fb7f939b4bf1.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240221/auto/storage/goog4_request%26X-Goog-Date%3D20240221T141245Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D3e4e76b63b1e600e95406faee08748d9151a5f855b99a7c52a0a85d752270eebd3782c91fd06d3cbde04fa8b6ff99e5826a82e773f0f54cc8b5f028d8235d9365648c05d31688618fbd9291de0aaa82c9e17b2dc4719a86547426a7757418af8a272d44685a9bcc8dbc8fd1a5f1c1c83f7206dfda668e5e45688d0c80776d27f3b5a27a09a83d015163d57df265321dc7a7ffdf81e1ca6fbf2c79d88d2cf58d638119bd0abcbaa7f12069964ab95a895a9b8ee9964a7b1c85978bee23d1fb41fb5dd905fb77ec589266c5f7cff127e0c68bcb7ad847bb3498cf161bf8e3f4ac4e3e8c363576137de7952125cc19e9d1bba8a1efaf259e93440c0a1fe14d26f0e
"""

# Commented out IPython magic to ensure Python compatibility.
import math
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

#Sigmoid Activation Function
def SigmoidActivation(dataset):
    output=[] #Store the ourput of the activation function.
    for x in dataset:
        y= 1 / (1 + (math.exp(-x))) #Generate the output for the given input values within a range.
        output.append(y)
    #The function returns the list of output
    return output

#ReLU Activation Function
def ReLUActivation(dataset):
    result=[] #Store the ourput of the activation function.
    for i in dataset:
        value= 0
        if i>0:
            value= i #Generate the output for the given input values within a range.
        result.append(value)
     #The function returns the list of output
    return result

#Generating random dataset
input_value= input("Do you want to enter the input value for the activation functions? (y/n): ")

if input_value== 'y':
    start= float(input("Enter the start value: "))
    stop= float(input("Enter the stop value: "))
    step= float(input("Enter the step value: "))
else:
    start= -5
    stop= 5
    step= 0.1


dataset= np.arange(start, stop, step)

#Plotting the result of the Sigmoid activation function
PlotSigmoid = SigmoidActivation(dataset)
plt.plot(dataset, PlotSigmoid)
# axis
ax =plt.gca()
plt.xlabel("Given Continuous Input Value")
plt.ylabel("Output Value Generated by the Function")
plt.title("Graphical Representation of Sigmoid Activation Function")
plt.show()

#Plotting the result of the ReLU activation function
PlotReLU = ReLUActivation(dataset)
plt.plot(dataset, PlotReLU)
# axis
ax =plt.gca()
plt.xlabel("Given Continuous Input Value")
plt.ylabel("Output Value Generated by the Function")
plt.title("Graphical Representation of ReLU Activation Function")
plt.show()